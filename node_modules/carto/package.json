{
  "name": "carto",
  "version": "0.9.5",
  "description": "Mapnik Stylesheet Compiler",
  "url": "https://github.com/mapbox/carto",
  "repository": {
    "type": "git",
    "url": "http://github.com/mapbox/carto.git"
  },
  "author": {
    "name": "MapBox",
    "email": "info@mapbox.com",
    "url": "http://mapbox.com/"
  },
  "keywords": [
    "mapnik",
    "maps",
    "css",
    "stylesheets"
  ],
  "contributors": [
    {
      "name": "Tom MacWright",
      "email": "macwright@gmail.com"
    },
    {
      "name": "Konstantin KÃ¤fer"
    },
    {
      "name": "Alexis Sellier",
      "email": "self@cloudhead.net"
    }
  ],
  "licenses": [
    {
      "type": "Apache"
    }
  ],
  "bin": {
    "carto": "./bin/carto",
    "mml2json.js": "./bin/mml2json.js"
  },
  "man": [
    "./man/carto.1"
  ],
  "main": "./lib/carto/index",
  "engines": {
    "node": ">=0.4.x"
  },
  "dependencies": {
    "underscore": "~1.4.3",
    "mapnik-reference": "~5.0.7",
    "xml2js": "~0.2.4",
    "optimist": "~0.6.0"
  },
  "devDependencies": {
    "mocha": "1.12.x",
    "jshint": "0.2.x",
    "sax": "0.1.x"
  },
  "scripts": {
    "pretest": "npm install",
    "test": "mocha -R spec"
  },
  "readme": "# CartoCSS\n\n[![Build Status](https://secure.travis-ci.org/mapbox/carto.png)](http://travis-ci.org/mapbox/carto)\n\nIs a stylesheet renderer for Mapnik. It's an evolution of the\n[Cascadenik](https://github.com/mapnik/Cascadenik) idea and language,\nwith an emphasis on speed and flexibility.\n\n## Reference Documentation\n\n* [mapbox.com/carto](http://mapbox.com/carto/)\n\n## MML\n_incompatibility_\n\n* MML files are assumed to be JSON, not XML. The files are near-identical\n  to the XML files accepted by Cascadenik, just translated into JSON.\n* CartoCSS will not embed files or download URLs for you. Stylesheets should\n  be embedded directly into your MML JSON and any datasources should be\n  paths (relative or absolute) that would be acceptable in Mapnik XML.\n  The [millstone project](https://github.com/mapbox/millstone) aims to fill this need.\n\nCartoCSS MML:\n\n    {\n        \"srs\": \"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over\",\n        \"Stylesheet\": [{\"id\":\"style.mss\",\"data\":\"Map {\\n  background-color: #fff;\\n}\\n\\n#world {\\n  line-color: #ccc;\\n  line-width: 0.5;\\n  polygon-fill: #eee;\\n}\"}],\n        \"Layer\": [{\n            \"id\": \"world\",\n            \"name\": \"world\",\n            \"srs\": \"+proj=latlong +ellps=WGS84 +datum=WGS84 +no_defs\",\n            \"Datasource\": {\n                \"file\": \"world_borders\",\n                \"type\": \"shape\"\n            }\n        }]\n    }\n\nCascadenik MML\n\n<pre>&lt;Stylesheet&gt;&lt;![CDATA[\n    Map {\n        map-bgcolor: #69f;\n    }\n\n    Layer {\n        line-width: 1;\n        line-color: #696;\n        polygon-fill: #6f9;\n    }\n]]&gt;&lt;/Stylesheet&gt;\n&lt;Layer srs=&quot;+proj=latlong +ellps=WGS84 +datum=WGS84 +no_defs&quot;&gt;\n    &lt;Datasource&gt;\n        &lt;Parameter name=&quot;type&quot;&gt;shape&lt;/Parameter&gt;\n        &lt;Parameter name=&quot;file&quot;&gt;world_borders&lt;/Parameter&gt;\n    &lt;/Datasource&gt;\n&lt;/Layer&gt;\n&lt;/Map&gt;</pre>\n\n## Attachments and Instances\n_new_\n\nIn CSS, a certain object can only have one instance of a property. A `<div>` has a specific border width and color, rules that match better than others (#id instead of .class) override previous definitions. `CartoCSS` acts the same way normally for the sake of familiarity and organization, but Mapnik itself is more powerful.\n\nLayers in Mapnik can have multiple [borders](http://trac.mapnik.org/wiki/LineSymbolizer) and multiple copies of other attributes. This ability is useful in drawing line outlines, like in the case of road borders or 'glow' effects around coasts. `CartoCSS` makes this accessible by allowing attachments to styles:\n\n    #world {\n      line-color: #fff;\n      line-width: 3;\n      }\n\n      #world::outline {\n        line-color: #000;\n        line-width: 6;\n        }\n\nAttachments are optional: if you don't define them, CartoCSS does overriding of styles just like Cascadenik.\n\nThis brings us to another _incompatibility_: `line-inline` and `line-outline` have been removed from the language, because attachments are capable of the same trick.\n\nWhile attachments allow creating implicit \"layers\" with the same data, using **instances** allows you to create multiple symbolizers in the same style/layer:\n\n    #roads {\n      casing/line-width: 6;\n      casing/line-color: #333;\n      line-width: 4;\n      line-color: #666;\n      }\n\nThis makes Mapnik first draw the line of color #333 with a width of 6, and then immediately afterwards, it draws the same line again with width 4 and color #666. Contrast that to attachments: Mapnik would first draw all casings before proceeding to the actual lines.\n\n## text-name\n_incompatibility_\n\nInstead of the name attribute of the [TextSymbolizer](http://trac.mapnik.org/wiki/TextSymbolizer) and [ShieldSymbolizer](http://trac.mapnik.org/wiki/ShieldSymbolizer) being a part of the selector, it is a property of a rule. Thus the evaluation is less complex and one can use expressions in names.\n\n<table>\n  <tr>\n    <th>cascadenik</th>\n    <th>CartoCSS</th>\n  </tr>\n  <tr>\n    <td valign='top'>\n      <pre>\n#world NAME {\n  text-face-name: \"Arial\";\n}</pre>\n    </td>\n    <td valign='top'>\n      <pre>\n#world {\n  text-name: \"NAME\";\n  text-face-name: \"Arial\";\n}</pre>\n    </td>\n  </tr>\n</table>\n\n## Mapnik\n_new_\n\nCartoCSS is only compatible with Mapnik >= 2.x.x.\n\n## Rasters and Buildings\n_new_\n\nRasters are supported in CartoCSS - it knows how to download `.vrt`, `.tiff`, and soon other raster formats, and the properties of the [RasterSymbolizer](http://trac.mapnik.org/wiki/RasterSymbolizer) are exposed in the language.\n\nThe [BuildingSymbolizer](http://trac.mapnik.org/wiki/BuildingSymbolizer) is also supported in `CartoCSS`. The code stores symbolizer types and properties in a JSON file (in `tree/reference.json`), so new Mapnik features can be quickly implemented here.\n\n## Variables & Expressions\n_new_\n\nCartoCSS inherits from its basis in [less.js](http://lesscss.org/) some new features in CSS. One can define variables in stylesheets, and use expressions to modify them.\n\n    @mybackground: #2B4D2D;\n    \n    Map {\n      background-color: @mybackground\n    }\n    \n    #world {\n      polygon-fill: @mybackground + #222;\n      line-color: darken(@mybackground, 10%);\n    }\n\n## Nested Styles\n_new_\n\nCartoCSS also inherits nesting of rules from less.js.\n\n    /* Applies to all layers with .land class */\n    .land {\n      line-color: #ccc;\n      line-width: 0.5;\n      polygon-fill: #eee;\n      /* Applies to #lakes.land */\n      #lakes {\n        polygon-fill: #000;\n      }\n    }\n\nThis can be a convenient way to group style changes by zoom level:\n\n    [zoom > 1] {\n      /* Applies to all layers at zoom > 1 */\n      polygon-gamma: 0.3;\n      #world {\n        polygon-fill: #323;\n      }\n      #lakes {\n        polygon-fill: #144;\n      }\n    }\n\n## FontSets\n\n_new_\n\nBy defining multiple fonts in a `text-face-name` definition, you create [FontSets](http://trac.mapnik.org/wiki/FontSet) in `CartoCSS`. These are useful for supporting multiple character sets and fallback fonts for distributed styles.\n\n<table>\n  <tr>\n    <th>carto</th><th>XML</th>\n    </tr>\n    <tr>\n    <td valign='top'>\n\n    <pre>#world {\n  text-name: \"[NAME]\";\n  text-size: 11;\n  text-face-name: \"Georgia Regular\", \"Arial Italic\";\n}</pre>\n\n</td>\n<td valign='top'>\n<pre>&lt;FontSet name=&quot;fontset-0&quot;&gt;\n  &lt;Font face-name=&quot;Georgia Regular&quot;/&gt;\n  &lt;Font face-name=&quot;Arial Italic&quot;/&gt;\n&lt;/FontSet&gt;\n&lt;Style name=&quot;world-text&quot;&gt;\n  &lt;Rule&gt;\n    &lt;TextSymbolizer fontset-name=&quot;fontset-0&quot;\n      size=&quot;11&quot;\n      name=&quot;[NAME]&quot;/&gt;\n  &lt;/Rule&gt;\n&lt;/Style&gt;</pre>\n</td>\n<tr>\n</table>\n\n## Filters\n\nCartoCSS supports a variety of filter styles:\n\nNumeric comparisons:\n\n```\n#world[population > 100]\n#world[population < 100]\n#world[population >= 100]\n#world[population <= 100]\n```\n\nGeneral comparisons:\n\n```\n#world[population = 100]\n#world[population != 100]\n```\n\n\nString comparisons:\n\n```\n/* a regular expression over name */\n#world[name =~ \"A.*\"]\n```\n\n## Developers\n\n#### Installation\n\nIf you're using [TileMill](http://mapbox.com/tilemill/), you're already\nusing CartoCSS and don't need to do a thing.\n\nIf you're a developer-type and want to use the `carto` binary with\n`node.js` (and you have [npm](http://npmjs.org/) installed),\n\n    npm install -g carto\n\n#### From the binary\n\nInstall `millstone` to enable support for localizing external resources (URLs and local files) referenced in your mml file.\n\n    npm install millstone\n    carto map_file.json\n\n#### From code\n\nCurrently CartoCSS is designed to be invoked from [node.js](http://nodejs.org/).\nThe `Renderer` interface is the main API for developers, and it takes an MML file as a string as input.\n\n    // defined variables:\n    // - input (the name or identifier of the file being parsed)\n    // - data (a string containing the MML or an object of MML)\n    var carto = require('carto');\n    \n    new carto.Renderer({\n            filename: input,\n            local_data_dir: path.dirname(input),\n        }).render(data, function(err, output) {\n            if (err) {\n                if (Array.isArray(err)) {\n                    err.forEach(function(e) {\n                        carto.writeError(e, options);\n                    });\n                } else { throw err; }\n            } else {\n                sys.puts(output);\n            }\n        });\n\n### Vim\n\nTo install, download or clone this repository, then add the `vim-carto`\ndirectory located at `build/vim-carto` to your `~/.vim` file.\n\n## Credits\n\nCartoCSS is based on [less.js](https://github.com/cloudhead/less.js), a CSS compiler written by Alexis Sellier.\n\nIt depends on:\n\n* [underscore.js](https://github.com/documentcloud/underscore/)\n\nOnly for running tests:\n\n* [mocha](https://github.com/visionmedia/mocha)\n* [sax-js](https://github.com/isaacs/sax-js/)\n\n## Authors\n\n* Tom MacWright (tmcw)\n* Konstantin KÃ¤fer (kkaefer)\n* AJ Ashton (ajashton)\n* Dane Springmeyer (springmeyer)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mapbox/carto/issues"
  },
  "homepage": "https://github.com/mapbox/carto",
  "_id": "carto@0.9.5",
  "_from": "carto@~0.9.5"
}
